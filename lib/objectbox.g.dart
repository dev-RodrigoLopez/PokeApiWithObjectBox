// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'data/model/pokemon_model_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(4, 3019400054676847125),
      name: 'AbilityBox',
      lastPropertyId: const IdUid(5, 6032401836975631065),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5096314097380276938),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3521895176006006041),
            name: 'idPokemon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 128135508750601802),
            name: 'idSpecies',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3741390285692883199),
            name: 'isHidden',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6032401836975631065),
            name: 'slot',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1822258968726268207),
      name: 'PokemonBox',
      lastPropertyId: const IdUid(10, 3522167183395620737),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8006705998623260681),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 951915039757846852),
            name: 'baseExperience',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3930934246222828166),
            name: 'height',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6635028529079011363),
            name: 'idPokemon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2990724078944766079),
            name: 'isDefault',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8713841540581358790),
            name: 'locationAreaEncounters',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2612798483951477036),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4576494936625592973),
            name: 'order',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7701044977227465342),
            name: 'weight',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5758667138190303679),
      name: 'SpeciesBox',
      lastPropertyId: const IdUid(4, 3276574330813950094),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2875276440382315888),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2464781881289672407),
            name: 'idPokemon',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3922814211383262860),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3276574330813950094),
            name: 'url',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1647513345510668961),
      name: 'SpritesBox',
      lastPropertyId: const IdUid(10, 6336958792937694665),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 951417128386842543),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8386578712458114978),
            name: 'backDefault',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2825965011297504503),
            name: 'backFemale',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8742208462070412883),
            name: 'backShiny',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7752656400259385314),
            name: 'backShinyFemale',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4395381354072298766),
            name: 'frontDefault',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2936211514392901928),
            name: 'frontFemale',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4428901903646872251),
            name: 'frontShiny',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4811804963873660687),
            name: 'frontShinyFemale',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6336958792937694665),
            name: 'idPokemon',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(7, 1647513345510668961),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        6207775296912182572,
        4558471609188021964,
        1069607477640535402
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1489247558707294775,
        8202162852118775565,
        1757126657059138259,
        9056648124455386154,
        1382889670600300101,
        9176269886940842975,
        348590624730862030,
        6935342819088152909,
        7317741781478510979,
        4314747161955411485,
        7725236398058151534,
        6889197874332452540,
        8186674778752880587,
        3035385588326652485,
        5521083619639715667,
        2111551098223978734,
        7456725323540305549,
        3522167183395620737
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AbilityBox: EntityDefinition<AbilityBox>(
        model: _entities[0],
        toOneRelations: (AbilityBox object) => [],
        toManyRelations: (AbilityBox object) => {},
        getId: (AbilityBox object) => object.id,
        setId: (AbilityBox object, int id) {
          object.id = id;
        },
        objectToFB: (AbilityBox object, fb.Builder fbb) {
          final idSpeciesOffset = fbb.writeString(object.idSpecies);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.idPokemon);
          fbb.addOffset(2, idSpeciesOffset);
          fbb.addBool(3, object.isHidden);
          fbb.addInt64(4, object.slot);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AbilityBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              idPokemon:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              idSpecies: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              isHidden: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              slot:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    PokemonBox: EntityDefinition<PokemonBox>(
        model: _entities[1],
        toOneRelations: (PokemonBox object) => [],
        toManyRelations: (PokemonBox object) => {},
        getId: (PokemonBox object) => object.id,
        setId: (PokemonBox object, int id) {
          object.id = id;
        },
        objectToFB: (PokemonBox object, fb.Builder fbb) {
          final locationAreaEncountersOffset =
              fbb.writeString(object.locationAreaEncounters);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.baseExperience);
          fbb.addInt64(2, object.height);
          fbb.addInt64(3, object.idPokemon);
          fbb.addBool(4, object.isDefault);
          fbb.addOffset(5, locationAreaEncountersOffset);
          fbb.addOffset(6, nameOffset);
          fbb.addInt64(7, object.order);
          fbb.addInt64(8, object.weight);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PokemonBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              baseExperience:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              height:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              idPokemon:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              isDefault: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 12, false),
              locationAreaEncounters:
                  const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 14, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              order:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              weight:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        }),
    SpeciesBox: EntityDefinition<SpeciesBox>(
        model: _entities[2],
        toOneRelations: (SpeciesBox object) => [],
        toManyRelations: (SpeciesBox object) => {},
        getId: (SpeciesBox object) => object.id,
        setId: (SpeciesBox object, int id) {
          object.id = id;
        },
        objectToFB: (SpeciesBox object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final urlOffset = fbb.writeString(object.url);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.idPokemon);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, urlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SpeciesBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              idPokemon:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              url: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    SpritesBox: EntityDefinition<SpritesBox>(
        model: _entities[3],
        toOneRelations: (SpritesBox object) => [],
        toManyRelations: (SpritesBox object) => {},
        getId: (SpritesBox object) => object.id,
        setId: (SpritesBox object, int id) {
          object.id = id;
        },
        objectToFB: (SpritesBox object, fb.Builder fbb) {
          final backDefaultOffset = fbb.writeString(object.backDefault);
          final backFemaleOffset = fbb.writeString(object.backFemale);
          final backShinyOffset = fbb.writeString(object.backShiny);
          final backShinyFemaleOffset = fbb.writeString(object.backShinyFemale);
          final frontDefaultOffset = fbb.writeString(object.frontDefault);
          final frontFemaleOffset = fbb.writeString(object.frontFemale);
          final frontShinyOffset = fbb.writeString(object.frontShiny);
          final frontShinyFemaleOffset =
              fbb.writeString(object.frontShinyFemale);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, backDefaultOffset);
          fbb.addOffset(2, backFemaleOffset);
          fbb.addOffset(3, backShinyOffset);
          fbb.addOffset(4, backShinyFemaleOffset);
          fbb.addOffset(5, frontDefaultOffset);
          fbb.addOffset(6, frontFemaleOffset);
          fbb.addOffset(7, frontShinyOffset);
          fbb.addOffset(8, frontShinyFemaleOffset);
          fbb.addInt64(9, object.idPokemon);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SpritesBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              idPokemon:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
              backDefault: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              backFemale: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              backShiny: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              backShinyFemale: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              frontDefault: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              frontFemale: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              frontShiny: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              frontShinyFemale: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AbilityBox] entity fields to define ObjectBox queries.
class AbilityBox_ {
  /// see [AbilityBox.id]
  static final id =
      QueryIntegerProperty<AbilityBox>(_entities[0].properties[0]);

  /// see [AbilityBox.idPokemon]
  static final idPokemon =
      QueryIntegerProperty<AbilityBox>(_entities[0].properties[1]);

  /// see [AbilityBox.idSpecies]
  static final idSpecies =
      QueryStringProperty<AbilityBox>(_entities[0].properties[2]);

  /// see [AbilityBox.isHidden]
  static final isHidden =
      QueryBooleanProperty<AbilityBox>(_entities[0].properties[3]);

  /// see [AbilityBox.slot]
  static final slot =
      QueryIntegerProperty<AbilityBox>(_entities[0].properties[4]);
}

/// [PokemonBox] entity fields to define ObjectBox queries.
class PokemonBox_ {
  /// see [PokemonBox.id]
  static final id =
      QueryIntegerProperty<PokemonBox>(_entities[1].properties[0]);

  /// see [PokemonBox.baseExperience]
  static final baseExperience =
      QueryIntegerProperty<PokemonBox>(_entities[1].properties[1]);

  /// see [PokemonBox.height]
  static final height =
      QueryIntegerProperty<PokemonBox>(_entities[1].properties[2]);

  /// see [PokemonBox.idPokemon]
  static final idPokemon =
      QueryIntegerProperty<PokemonBox>(_entities[1].properties[3]);

  /// see [PokemonBox.isDefault]
  static final isDefault =
      QueryBooleanProperty<PokemonBox>(_entities[1].properties[4]);

  /// see [PokemonBox.locationAreaEncounters]
  static final locationAreaEncounters =
      QueryStringProperty<PokemonBox>(_entities[1].properties[5]);

  /// see [PokemonBox.name]
  static final name =
      QueryStringProperty<PokemonBox>(_entities[1].properties[6]);

  /// see [PokemonBox.order]
  static final order =
      QueryIntegerProperty<PokemonBox>(_entities[1].properties[7]);

  /// see [PokemonBox.weight]
  static final weight =
      QueryIntegerProperty<PokemonBox>(_entities[1].properties[8]);
}

/// [SpeciesBox] entity fields to define ObjectBox queries.
class SpeciesBox_ {
  /// see [SpeciesBox.id]
  static final id =
      QueryIntegerProperty<SpeciesBox>(_entities[2].properties[0]);

  /// see [SpeciesBox.idPokemon]
  static final idPokemon =
      QueryIntegerProperty<SpeciesBox>(_entities[2].properties[1]);

  /// see [SpeciesBox.name]
  static final name =
      QueryStringProperty<SpeciesBox>(_entities[2].properties[2]);

  /// see [SpeciesBox.url]
  static final url =
      QueryStringProperty<SpeciesBox>(_entities[2].properties[3]);
}

/// [SpritesBox] entity fields to define ObjectBox queries.
class SpritesBox_ {
  /// see [SpritesBox.id]
  static final id =
      QueryIntegerProperty<SpritesBox>(_entities[3].properties[0]);

  /// see [SpritesBox.backDefault]
  static final backDefault =
      QueryStringProperty<SpritesBox>(_entities[3].properties[1]);

  /// see [SpritesBox.backFemale]
  static final backFemale =
      QueryStringProperty<SpritesBox>(_entities[3].properties[2]);

  /// see [SpritesBox.backShiny]
  static final backShiny =
      QueryStringProperty<SpritesBox>(_entities[3].properties[3]);

  /// see [SpritesBox.backShinyFemale]
  static final backShinyFemale =
      QueryStringProperty<SpritesBox>(_entities[3].properties[4]);

  /// see [SpritesBox.frontDefault]
  static final frontDefault =
      QueryStringProperty<SpritesBox>(_entities[3].properties[5]);

  /// see [SpritesBox.frontFemale]
  static final frontFemale =
      QueryStringProperty<SpritesBox>(_entities[3].properties[6]);

  /// see [SpritesBox.frontShiny]
  static final frontShiny =
      QueryStringProperty<SpritesBox>(_entities[3].properties[7]);

  /// see [SpritesBox.frontShinyFemale]
  static final frontShinyFemale =
      QueryStringProperty<SpritesBox>(_entities[3].properties[8]);

  /// see [SpritesBox.idPokemon]
  static final idPokemon =
      QueryIntegerProperty<SpritesBox>(_entities[3].properties[9]);
}
